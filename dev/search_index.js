var documenterSearchIndex = {"docs":
[{"location":"#Extents","page":"Home","title":"Extents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Extents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Extents.Extent","page":"Home","title":"Extents.Extent","text":"Extent\n\nExtent(; kw...)\nExtent(bounds::NamedTuple)\n\nA wrapper for a NamedTuple of tuples holding the lower and upper bounds for each dimension of the object.\n\nkeys(extent) will return the dimension name Symbols, in the order the dimensions are used in the object.\n\nvalues(extent) will return a tuple of tuples: (lowerbound, upperbound) for each dimension.\n\nExamples\n\njulia> ext = Extent(X = (1.0, 2.0), Y = (3.0, 4.0))\nExtent(X = (1.0, 2.0), Y = (3.0, 4.0))\n\njulia> keys(ext)\n(:X, :Y)\n\njulia> values(ext)\n((1.0, 2.0), (3.0, 4.0))\n\n\n\n\n\n","category":"type"},{"location":"#Extents.buffer-Union{Tuple{K}, Tuple{Extent{K}, NamedTuple}} where K","page":"Home","title":"Extents.buffer","text":"buffer(ext::Extent, buff::NamedTuple)\n\nbuffer Extent by corresponding name-pair values supplied in buff NamedTuple.\n\nExamples\n\njulia> ext = Extent(X = (1.0, 2.0), Y = (3.0, 4.0))\nExtent(X = (1.0, 2.0), Y = (3.0, 4.0))\n\njulia> ext_buffered = Extents.buffer(ext, (X=1, Y=3))\nExtent(X = (0.0, 3.0), Y = (0.0, 7.0))\n\n\n\n\n\n","category":"method"},{"location":"#Extents.contains-Tuple{Extent, Extent}","page":"Home","title":"Extents.contains","text":"contains(a, b; strict=false)\ncontains(b; strict=false)(a)\n\nExtent a contains extent b if no points of b lie in the exterior of a,  and at least one point of the interior of b lies in the interior of a. If b has no interior points it is not contained in a.\n\nIdentical to within with argument order reversed.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.coveredby-Tuple{Any, Any}","page":"Home","title":"Extents.coveredby","text":"coveredby(a, b; strict=false)\ncoveredby(b; strict=false)(a)\n\nAt least one point of extent a lies in extent b,  and no point of a lies in the exterior of b.\n\nEvery point of a is a point in the interior or boundary of b. \n\nIdentical to covers with argument order reversed.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.covers-Tuple{Extent, Extent}","page":"Home","title":"Extents.covers","text":"covers(a, b; strict=false)\ncovers(b; strict=false)(a)\n\nAt least one point of extent b lies in extent a,  and no point of b lies in the exterior of a.\n\nEvery point of b is a point in the interior or boundary of a. \n\nIdentical to coveredby with argument order reversed.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.disjoint-Tuple{Any, Any}","page":"Home","title":"Extents.disjoint","text":"disjoint(a, b; strict=false)\ndisjoint(b; strict=false)(a)\n\nExtents a and b are disjoint if they have no point in common (the inverse of intersects).\n\nReturns false if the extents of all common dimensions share some values, including just the edge values of their range.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions when strict=false, true is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.equals-Tuple{Extent, Extent}","page":"Home","title":"Extents.equals","text":"equals(a, b; strict=false)\nequals(b; strict=false)(a)\n\nExtents a and b are topologically equal: their interiors intersect and no  part of the interior or boundary of one intersects the exterior of the other.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.extent","page":"Home","title":"Extents.extent","text":"extent(x)\n\nReturns an Extent, holding the bounds for each dimension of the object.\n\n\n\n\n\n","category":"function"},{"location":"#Extents.grow-Tuple{Extent, Union{Real, Tuple{Real, Real}}}","page":"Home","title":"Extents.grow","text":"grow(ext::Extent, x)\ngrow(ext::Extent; kw...)\n\nGrow the bounds of the extent by x, as a fraction of the current size of the extent.\n\nIf x is a Tuple the lower and upper bounds are grow by those amounts.\n\nKeyword arguments or a NamedTuple also be passed, with the same or a subset of the keys as ext. This can hold Real or Tuple{Real,Real} values for  each named dimension.\n\nExamples\n\njulia> ext = Extent(X = (1.0, 1.8), Y = (3.0, 5.0))\nExtent(X = (1.0, 1.8), Y = (3.0, 5.0))\n\njulia> Extents.grow(ext, 0.5) \nExtent(X = (0.6, 2.2), Y = (2.0, 6.0))\n\n\n\n\n\n","category":"method"},{"location":"#Extents.intersection-Tuple{Extent, Extent}","page":"Home","title":"Extents.intersection","text":"intersection(ext1::Extent, ext2::Extent; strict=false)\n\nGet the intersection of two extents as another Extent, e.g. the area covered by the shared dimensions for both extents.\n\nIf there is no intersection for any shared dimension, nothing will be returned.\n\nThe order of dimensions is ignored in all cases.\n\n\n\n\n\n","category":"method"},{"location":"#Extents.intersects-Tuple{Extent, Extent}","page":"Home","title":"Extents.intersects","text":"intersects(a, b; strict=false)\nintersects(b; strict=false)(a)\n\na intersects b if a and b have at least one point in common (the inverse of disjoint).\n\nReturns true if the extents of all common dimensions share some values, including just the edge values of their range.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.overlaps-Tuple{Extent, Extent}","page":"Home","title":"Extents.overlaps","text":"overlaps(a, b; strict=false)\noverlaps(b; strict=false)(a)\n\nExtent a overlaps extent b: they have some but not all points in common,  they have the same dimension, and the intersection of the interiors of the two geometries has the same dimension as the geometries themselves.\n\nReturns true if the extents of common dimensions overlap.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.touches-Tuple{Extent, Extent}","page":"Home","title":"Extents.touches","text":"touches(a, b; strict=false)\ntouches(b; strict=false)(a)\n\nExtents a and b have at least one point in common, but their interiors do not intersect. \n\nReturns true if the extents of any common dimensions share boundaries.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions with strict=false, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"},{"location":"#Extents.union-Tuple{Extent, Extent}","page":"Home","title":"Extents.union","text":"union(ext1::Extent, ext2::Extent; strict=false)\n\nGet the union of two extents, e.g. the combined extent of both objects for all dimensions.\n\nThe order of dimensions is ignored in all cases.\n\n\n\n\n\n","category":"method"},{"location":"#Extents.within-Tuple{Any, Any}","page":"Home","title":"Extents.within","text":"within(a, b; strict=false)\nwithin(b; strict=false)(a)\n\nExtent a is within extent b if no points of a lie in the exterior of b,  and at least one point of the interior of a lies in the interior of b. If a has no interior points it is not contained in b.\n\nIdentical to contains with argument order reversed.\n\nDimensions that are not shared are ignored by default with strict=false. When strict=true, any unshared dimensions cause the function to return nothng.\n\nIf there are no common dimensions, false is returned.\n\nThe order of dimensions is ignored in all cases.\n\nConforms to the DE-9IM spatial predicates standard https://en.wikipedia.org/wiki/DE-9IM\n\n\n\n\n\n","category":"method"}]
}
